name: CI

on: [push, workflow_dispatch]

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
          
      - name: Install Dependencies
        run: |

          pip install flask flask-socketio python-engineio==3.14.2 python-socketio==4.6.0 pyautogui opencv-python numpy pillow
          
      - name: Create Remote Access Server
        run: |

          echo "import flask, flask_socketio, pyautogui, cv2, base64, io, numpy
          from PIL import Image
          
          app = flask.Flask(__name__)

          socketio = flask_socketio.SocketIO(app, cors_allowed_origins='*')
          
          @app.route('/')
          def index():
              return '''
              <html>
                <head>
                  <script src='https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js'></script>
                </head>
                <body>
                  <img id='screen' style='width:100%'>
                  <script>
                    var socket = io();
                    socket.on('screen', function(data) {
                      document.getElementById('screen').src = 'data:image/jpeg;base64,' + data;
                    });
                    document.addEventListener('mousemove', function(e) {
                      socket.emit('mouse', {x: e.clientX, y: e.clientY});
                    });
                    document.addEventListener('keydown', function(e) {
                      socket.emit('key', {key: e.key});
                    });
                  </script>
                </body>
              </html>
              '''
          
          @socketio.on('mouse')
          def mouse(data):
              pyautogui.moveTo(data['x'], data['y'])
              
          @socketio.on('key')
          def key(data):
              pyautogui.press(data['key'])
              
          def capture_screen():
              while True:
                  screen = pyautogui.screenshot()
                  _, buffer = cv2.imencode('.jpg', cv2.cvtColor(numpy.array(screen), cv2.COLOR_RGB2BGR))
                  socketio.emit('screen', base64.b64encode(buffer).decode())
                  socketio.sleep(0.1)
          



          if __name__ == '__main__':
              socketio.start_background_task(capture_screen)
              socketio.run(app, host='0.0.0.0', port=5000)" > server.py
          start /B python server.py
          
      - name: Install Cloudflared
        run: |
          Invoke-WebRequest https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-windows-amd64.exe -OutFile cloudflared.exe
          
      - name: Create Tunnel
        run: |

          .\cloudflared.exe tunnel --no-autoupdate --url http://localhost:5000
